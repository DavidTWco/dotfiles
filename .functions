# davidtwco .functions.sh Configuration
#	dotfiles: https://github.com/davidtwco/dotfiles
#	website: https://davidtw.co
# ==================================================
# This file contains functions used by both `.zshrc` and `.bashrc`.

_setup_gpg_ssh() {
    if _is_wsl; then
        if [ ! -d "$HOME/.gnupg/socketdir" ]; then
            # On Windows, symlink the directory that contains `S.gpg-agent.ssh` from `wsl-pageant`.
            # `npiperelay` will place `S.gpg-agent.extra` in this directory.
            # This will be the exact same locations that files are placed when running on Linux,
            # so that remote forwarding works.
            ln -s "/mnt/c/wsl-pageant" "$HOME/.gnupg/socketdir"
        fi

        # When setting up GPG forwarding to WSL on Windows, get `npiperelay` (see comment in
        # `_run_npiperelay`) and `gpg4win`. Add a shortcut that runs at startup that will launch
        # the gpg-agent:
        #
        #   "C:\Program Files (x86)\GnuPG\bin\gpg-connect-agent.exe" /bye

        # Relay the primary GnuPG socket to `~/.gnupg/S.gpg-agent` which will be used by the
        # GPG agent.
        _run_npiperelay "$HOME/.gnupg/socat-gpg.pid" "$HOME/.gnupg/S.gpg-agent" \
            "C:/Users/David/AppData/Roaming/gnupg/S.gpg-agent"

        # Relay the extra GnuPG socket to `~/.gnupg/S.gpg-agent.extra` which will be forwarded to
        # remote SSH hosts.
        _run_npiperelay "$HOME/.gnupg/socat-gpg-extra.pid" \
            "$HOME/.gnupg/socketdir/S.gpg-agent.extra" \
            "C:/Users/David/AppData/Roaming/gnupg/S.gpg-agent.extra"

        # When setting up SSH forwarding to WSL on Windows, get `wsl-ssh-pageant`
        # (https://github.com/benpye/wsl-ssh-pageant) and place it in `C:\wsl-pageant`. Add a
        # `wsl-pageant.vbs` script to the startup directory with the following contents:
        #
        # ```vbs
        # Set objFile = WScript.CreateObject("Scripting.FileSystemObject")
        # if objFile.FileExists("c:\wsl-pageant\S.gpg-agent.ssh") then
        #     objFile.DeleteFile "c:\wsl-pageant\S.gpg-agent.ssh"
        # end if
        # Set objShell = WScript.CreateObject("WScript.Shell")
        # objShell.Run( _
        #   "C:\wsl-pageant\wsl-ssh-pageant-amd64.exe --wsl c:\wsl-pageant\S.gpg-agent.ssh"), _
        #   0, True
        # ```

        # This file should exist because of `wsl-ssh-pageant`.
        export SSH_AUTH_SOCK="$HOME/.gnupg/socketdir/S.gpg-agent.ssh"
    else
        if [ ! -d "$HOME/.gnupg/socketdir" ]; then
            # On Linux, symlink this to the directory where the sockets are placed by the GPG agent.
            # This needs to exist for the remote forwarding.
            ln -s "$(dirname "$(gpgconf --list-dirs agent-socket)")" "$HOME/.gnupg/socketdir"
        fi

        export GPG_TTY=$(tty)
        if _has gpg-agent && _has gpgconf; then
            export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
            if [ -z $SSH_CONNECTION ] && [ -z $SSH_CLIENT ]; then
                # Don't start the `gpg-agent` for remote connections. The sockets from the local
                # host will be forwarded and picked up by the gpg client.
                gpgconf --launch gpg-agent
            fi
        fi
    fi
}

_run_npiperelay() {
    # This function will forward a named pipe from Windows to a socket in WSL. It expects
    # `npiperelay.exe` (from https://github.com/NZSmartie/npiperelay/releases) to exist at
    # `C:\npiperelay.exe`.
    SOCAT_PID_FILE="${1}"
    SOCKET_PATH="${2}"
    WINDOWS_PATH="${3}"

    if [[ -f $SOCAT_PID_FILE ]] && kill -0 $(cat $SOCAT_PID_FILE); then
        : # Already running.
    else
        rm -f "${SOCKET_PATH}"
        EXEC="/mnt/c/npiperelay.exe -ei -ep -s -a '${WINDOWS_PATH}'"
        (trap "rm $SOCAT_PID_FILE" EXIT; socat UNIX-LISTEN:$SOCKET_PATH,fork EXEC:$EXEC,nofork \
          </dev/null &>/dev/null) &
        echo $! >$SOCAT_PID_FILE
    fi
}

_has() {
    which $1>/dev/null 2>&1
}

_is_wsl() {
    grep -q Microsoft /proc/version
}

# vim:foldmethod=marker:foldlevel=0:sts=4:ts=4:sw=4:et:ft=sh
